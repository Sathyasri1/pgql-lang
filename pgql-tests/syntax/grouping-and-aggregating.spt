module group-by

language pgql-lang

test Aggregate over empty group [[

  SELECT COUNT(*), AVG(n.salary), LISTAGG(n.salary), MIN(n.salary), MAX(n.salary), SUM(n.salary)
   MATCH (n)
   WHERE n.name = 'not exists'

]]

test Basic GROUP BY 1 [[

    SELECT n.age, COUNT(*), AVG(n.salary), LISTAGG(n.salary), MIN(n.salary), MAX(n.salary), SUM(n.salary)
     MATCH (n)
  GROUP BY n.age

]]

test Basic GROUP BY 2 [[

    SELECT n.age, COUNT(*), AVG(n.salary), LISTAGG(n.salary), MIN(n.salary), MAX(n.salary), SUM(n.salary)
     MATCH (n)
  GROUP BY n.age

]]

test Basic GROUP BY 3 [[

    SELECT x, x.age
     MATCH (x)
  GROUP BY x
  ORDER BY x

]]

test SELECT * and GROUP BY 1 [[

    SELECT *
     MATCH (n) -[e]-> (m)
  GROUP BY n, e, m

]]

test SELECT * and GROUP BY 2 [[

    SELECT *
     MATCH (n) -> (m)
  GROUP BY n, m

]]

test SELECT * and GROUP BY 3 [[

    SELECT *
     MATCH (n) -> (m)
  GROUP BY n

]]

test Aggregation of group key 1 [[

    SELECT AVG(nAge)
     MATCH (n)
  GROUP BY n.age AS nAge

]]

test Aggregation of group key 2 [[

    SELECT AVG(n.age)
     MATCH (n)
  GROUP BY n.age

]]

test Aggregation of group key 3 [[

    SELECT nAge, AVG(nAge)
     MATCH (n)
  GROUP BY n.age AS nAge

]]

test Aggregation of group key 3 [[

    SELECT n.age, AVG(n.age)
     MATCH (n)
  GROUP BY n.age

]]

test Group variable but variable not used [[

    SELECT n.age
     MATCH (n)
  GROUP BY n.age AS nAge

]]

test Select Distinct [[

  SELECT DISTINCT n.age
   MATCH (n)

]]

test Aggregate Distinct [[

  SELECT LISTAGG(DISTINCT n.salary), MIN(DISTINCT n.age), MAX(DISTINCT n.age), COUNT(DISTINCT n.age), SUM(DISTINCT n.age), AVG(DISTINCT n.age)
   MATCH (n)

]]

test Filter groups (HAVING) [[

  SELECT n.age, COUNT(*)
   MATCH (n)
  GROUP BY n.age
  HAVING n.age > 25

]]
