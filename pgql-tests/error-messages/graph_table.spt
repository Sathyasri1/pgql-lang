module variables

language pgql-lang

test Restriction: colon [[

  SELECT *
  FROM GRAPH_TABLE (
         g MATCH (n[[:]]person)
         WHERE EXISTS ( SELECT * 
                        FROM GRAPH_TABLE (
                               g MATCH (m IS person) -> (o[[:]]person)
                               WHERE element_id(n) = element_id(m)
                               COLUMNS ( m.prop ) ) )
         COLUMNS ( n.prop ) )

]] error like "GRAPH_TABLE restriction: use IS instead of :" at #1, #2

test Restriction: colon [[

  SELECT *
  FROM GRAPH_TABLE (
         g MATCH (n IS person)
         COLUMNS ( n.prop ) )
     , MATCH (n2[[:]]person) -[e[[:]]knows]-> (n3 IS person)

]] error like "GRAPH_TABLE restriction: use IS instead of :" at #1, #2

test Restriction: graph name [[

  SELECT *
  FROM [[GRAPH_TABLE (
         MATCH (person IS person) -[e]-> ()
         COLUMNS ( person.first_name ) )]]

]] error like "GRAPH_TABLE restriction: graph name required" at #1

test Restriction: subquery without GRAPH_TABLE [[

  SELECT *
  FROM GRAPH_TABLE (
         g MATCH (person IS person)
         WHERE EXISTS ( SELECT 1
                        FROM [[MATCH (n) ON g,]]
                             [[MATCH ( (n) ) ON g )]]
            OR EXISTS ( [[SELECT 1 FROM g MATCH (n)]] )
            OR EXISTS ( [[SELECT 1 WHERE (n)]] )
         COLUMNS ( person.prop ) )

]] error like "GRAPH_TABLE restriction: wrap top-level MATCH in GRAPH_TABLE" at #1, #2
   error like "Subquery uses older version of PGQL syntax; please make sure that both inner and outer query use the same PGQL version" at #3, #4

test Restriction: MATCH without GRAPH_TABLE [[

  SELECT *
  FROM GRAPH_TABLE (
         g MATCH (n IS person)
         COLUMNS ( n.prop ) )
     , [[MATCH (n2) ON g]]

]] error like "GRAPH_TABLE restriction: wrap top-level MATCH in GRAPH_TABLE" at #1


test Restriction: vertex sharing with outer query (1) [[

  SELECT *
  FROM GRAPH_TABLE (
         g MATCH (person IS person)
         WHERE EXISTS ( SELECT *
                        FROM GRAPH_TABLE (
                               g MATCH ([[person]])
                               COLUMNS ( 1 ) ) )
         COLUMNS ( person.first_name ) )

]] error like "GRAPH_TABLE restriction: vertex sharing between inner and outer query is not allowed, introduce a new variable name like person_new and use WHERE element_id(person_new) = element_id(person)" at #1

test Restriction: vertex sharing with outer query (2) [[

  SELECT *
  FROM GRAPH_TABLE (
         g MATCH (person IS person)
         WHERE EXISTS ( SELECT *
                        FROM GRAPH_TABLE (
                               g MATCH (n)
                               WHERE EXISTS ( SELECT *
                                             FROM GRAPH_TABLE (
                                               g MATCH ([[person]]) -> ([[n]])
                                               COLUMNS ( 1 ) ) )
                               COLUMNS ( 1 ) ) )
         COLUMNS ( person.first_name ) )

]] error like "GRAPH_TABLE restriction: vertex sharing between inner and outer query is not allowed, introduce a new variable name like person_new and use WHERE element_id(person_new) = element_id(person)" at #1
   error like "GRAPH_TABLE restriction: vertex sharing between inner and outer query is not allowed, introduce a new variable name like n_new and use WHERE element_id(n_new) = element_id(n)" at #2

test Restriction: LIMIT [[

  SELECT *
  FROM GRAPH_TABLE (
         g MATCH (person IS person)
         WHERE EXISTS ( SELECT *
                        FROM GRAPH_TABLE (
                               g MATCH (car IS car)
                               COLUMNS ( 1 )
                             )
                        [[LIMIT 11]] )
         COLUMNS ( person.first_name ) )

]] error like "GRAPH_TABLE restriction: use FETCH FIRST 11 ROWS ONLY instead of LIMIT 11" at #1

test Restriction: LIMIT outsie GRAPH_TABLE [[

  SELECT *
  FROM GRAPH_TABLE (
         g MATCH (person IS person)
         COLUMNS ( person.first_name ) )
  OFFSET 10
  [[LIMIT 11]]

]] error like "GRAPH_TABLE restriction: use FETCH FIRST 11 ROWS ONLY instead of LIMIT 11" at #1

test Restriction: projecting vertex/edge objects [[

  SELECT *
  FROM GRAPH_TABLE (
         g MATCH (n) -[e]-> (m)
         COLUMNS ( [[n,]] [[e,]] [[m )]] )

]] error like "GRAPH_TABLE restriction: cannot project vertex or edge objects" at #1, #2, #3

test Restriction: SHORTEST [[

  SELECT *
  FROM GRAPH_TABLE (
         g MATCH [[SHORTEST(n) -[e]->* (m)]]
         COLUMNS ( 1 )
       )

]] error like "GRAPH_TABLE restriction: use ANY SHORTEST or ALL SHORTEST instead of SHORTEST" at #1

test Restriction: TOP k SHORTEST [[

  SELECT *
  FROM GRAPH_TABLE (
         g MATCH [[TOP 12 SHORTEST(n) -[e]->* (m)]]
         COLUMNS ( 1 )
       )

]] error like "GRAPH_TABLE restriction: use SHORTEST 12 instead of TOP 12 SHORTEST" at #1

test Restriction: label(..) and labels(..) [[

  SELECT *
  FROM GRAPH_TABLE (
         g MATCH (n)
         COLUMNS ( [[label(n)]] AS lbl, [[labels(n)]] AS lbls )
       )

]] error like "GRAPH_TABLE restriction: cannot use label(..) or labels(..), try using the IS LABELED predicate" at #1, #2

test Restriction: has_label(..) [[

  SELECT *
  FROM GRAPH_TABLE (
         g MATCH (n)
         COLUMNS ( [[has_label(n, 'PERSON')]], [["HAS_LABEL"(n, 'Car')]], [[Has_Label(n, 'House')]] )
       )

]] error like "GRAPH_TABLE restriction: use n IS LABELED " at #1, #2, #3 // Spoofax tests do not support quotes so we can't test for the full message string here

test Restriction: no COLUMNS clause [[

  SELECT 1
  FROM [[GRAPH_TABLE (
         g MATCH (n)
       )]]

]] error like "GRAPH_TABLE restriction: COLUMNS clause is required" at #1

test Restriction: ALL_DIFFERENT but no vertex/edge input [[

  SELECT 1
  FROM GRAPH_TABLE (
         g MATCH (n)
         WHERE All_Different([[n.prop1]], [[1]], [['x']], n)
         COLUMNS ( 1 )
       )

]] error like "GRAPH_TABLE restriction: ALL_DIFFERENT predicate allows vertex and edge inputs only" at #1, #2, #3

test Restriction: JAVA_REGEXP_LIKE [[

  SELECT 1
  FROM GRAPH_TABLE (
         g MATCH (n)
         WHERE [[Java_Regexp_Like('aaaaab', 'a*b')]]
         COLUMNS ( 1 )
       )

]] error like "GRAPH_TABLE restriction: JAVA_REGEXP_LIKE not supported, try using a UDF instead" at #1

test Restriction: IN_DEGREE and OUT_DEGREE [[

  SELECT 1
  FROM GRAPH_TABLE (
         g MATCH (n)
         WHERE [[in_degree(n)]] > 10 AND [[out_degree(n)]] > 10
         COLUMNS ( 1 )
       )

]] error like "GRAPH_TABLE restriction: IN_DEGREE not supported, use a subquery instead" at #1
   error like "GRAPH_TABLE restriction: OUT_DEGREE not supported, use a subquery instead" at #2

test Restriction: vertex and edge equals [[

  SELECT 1
  FROM GRAPH_TABLE (
         g MATCH (n) -[e1]-> (m) -[e2]-> (o)
         WHERE [[n = m]] AND [[e1 = e2]]
           AND [[n <> m]] AND [[e1 <> e2]]
         COLUMNS ( 1 )
       )

]] error like "GRAPH_TABLE restriction: use SAME(n, m)" at #1
   error like "GRAPH_TABLE restriction: use SAME(e1, e2)" at #2
   error like "GRAPH_TABLE restriction: use NOT SAME(n, m)" at #3
   error like "GRAPH_TABLE restriction: use NOT SAME(e1, e2)" at #4

// ROW PER MATCH clause
