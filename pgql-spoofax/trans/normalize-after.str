module normalize-after

imports

  stratego/-
  signatures/-
  normalized-signatures
  common
  pp
  type-analysis

rules

  normalize-after = try(?AstPlusMetadata(_, metadata)
                  ; innermost(inPredicate-to-non-equality-constraints(|metadata) <+ norm-inPredicate)
                  ; AstPlusMetadata(push-down-predicates(|[]), id))

rules

  inPredicate-to-non-equality-constraints(|metadata):
    t@InPredicate(exp1, notIn, exp2@Array(valueExpressions)) -> result
    where <not(is-simple-inPredicate-expression)> exp2

        // don't tranform IN into set of non-equality if types are not compatible
        ; [x|xs] := valueExpressions
        ; <?ExpressionPlusType(_, _); is-compatible-type(|x, metadata)> exp1
        ; <map(is-compatible-type(|x, metadata))> valueExpressions
    with disjunction := <map(to-eq-expression(|metadata, exp1, t)); to-disjunction-with-types> valueExpressions
       ; disjunction' := <origin-track-forced(!disjunction)> t
       ; if <?Some(NOT())> notIn
         then result := <origin-track-forced(!Not(disjunction'))> t
         else result := disjunction'
         end

  is-simple-inPredicate-expression = ?BindVariable(_)
  is-simple-inPredicate-expression = ?Array(<id>); map(?ExpressionPlusType(<id>, _); is-literal-no-bindVariable) // array with literals only

  to-eq-expression(|metadata, expPlusType1, origin-term):
    expPlusType2 -> ExpressionPlusType(exp', type')
    where <?ExpressionPlusType(exp1, type1)> expPlusType1
        ; <?ExpressionPlusType(exp2, type2)> expPlusType2
        ; exp' := <origin-track-forced(!Eq(expPlusType1, expPlusType2))> origin-term
        ; if <?Type(t1)> type1; <?Type(t2)> type2
          then type' := <get-binary-operation-return-type(|metadata); not(?Undefined()) /* if equality operation is not supported between these types then we don't want to normalize */> ("Eq", t1, t2)
          else type' := UnknownType()
          end

  norm-inPredicate:
    t@InPredicate(exp1, notIn, exp2) -> result
    with inPredicate := <origin-track-forced(!InPredicate(exp1, exp2))> t
       ; if <?Some(NOT())> notIn
         then result := <origin-track-forced(!Not(inPredicate))> t
         else result := inPredicate
         end

rules

  push-down-predicates(|variablesOuterQuery):
    NormalizedQuery(commonPathExpressions, selectOrModifyClause, optionalGraphName, tableExpressions, Constraints(expressions), groupBy, having, orderBy, limitOffsets, error-messages, version, bindVariableCount, selectingAllVariables)
      -> NormalizedQuery( <push-down-predicates-for-commonPathExpressions(|variablesOuterQuery)> commonPathExpressions
                        , <alltd(push-down-predicates(|variablesOuterQuery''))> selectOrModifyClause
                        , optionalGraphName
                        , tableExpressions'
                        , Constraints(non-pushed-down-predicates)
                        , <alltd(push-down-predicates(|variablesOuterQuery'))> groupBy
                        , <alltd(push-down-predicates(|variablesOuterQuery'''))> having
                        , <alltd(push-down-predicates(|variablesOuterQuery'''))> orderBy
                        , limitOffsets, error-messages, version, bindVariableCount, selectingAllVariables)
    with expressions' := <map(conjunction-to-list); concat> expressions
       ; expressions-plus-varRefs := <map(make-expressions-varRefs-tuple)> expressions'
       ; (non-pushed-down-predicates-plus-varRefs, tableExpressions', allNewVariables) := <foldl(try-push-down-predicates(|variablesOuterQuery))> (tableExpressions, (expressions-plus-varRefs, [], []))
       ; non-pushed-down-predicates := <map(?(<id>, _))> non-pushed-down-predicates-plus-varRefs
       ; variablesOuterQuery' := <conc; make-set> (variablesOuterQuery, allNewVariables)
       ; variablesOuterQuery'' := <conc; make-set> (variablesOuterQuery', <?Some(GroupByClause(<id>)); map(?ExpAsVar(_, _, _, <id>)) <+ ![]> groupBy) // add variables from GROUP BY
       ; variablesOuterQuery''' := <conc; make-set> (variablesOuterQuery'', <?SelectClause(_, SelectList(<id>)); map(?ExpAsVar(_, _, _, <id>)) <+ ![]> selectOrModifyClause) // add variables from SELECT

  make-expressions-varRefs-tuple:
    exp -> (exp, offsets)
    with varRefs := <collect(?VarRef(_, <id>))> exp
       // only keep the variable references that refer to variable defintions defined outside of the expression
       // EXISTS and scalar subqueries may define new variables that are referenced, but we don't want to include those
       ; varDefs := <collect-var-def-offsets> exp
       ; offsets := <diff> (varRefs, varDefs)

  try-push-down-predicates(|variablesOuterQuery):
    (t@GraphPattern(vertices, connections, Constraints(valueExpression)), (remaining-expressions-plus-varRefs, tableExpressions, allVariablesExceptFromOuterQuery)) -> (remaining-expressions-plus-varRef', tableExpressions', allVariablesExceptFromOuterQuery')
    with new-variables := <collect-var-def-offsets-from-graph-pattern> t
       ; visible-variables := <conc; make-set> (variablesOuterQuery, allVariablesExceptFromOuterQuery, new-variables)
       ; (pushed-down-predicates, remaining-expressions-plus-varRef') := <foldl(try-push-down-predicate(|visible-variables))> (remaining-expressions-plus-varRefs, ([], []))
       ; valueExpression' := <conc> (valueExpression, pushed-down-predicates)
       ; graphPattern' := GraphPattern(vertices, connections, <alltd(push-down-predicates(|visible-variables))> Constraints(valueExpression'))
       ; tableExpressions' := <conc> (tableExpressions, [graphPattern'])
       ; allVariablesExceptFromOuterQuery' := <conc; make-set> (allVariablesExceptFromOuterQuery, new-variables)

  try-push-down-predicate(|variables):
    (t@(exp, vars-in-exp), (pushed-down-predicates, remaining-expressions-plus-varRef)) -> (pushed-down-predicates', remaining-expressions-plus-varRef')
    with if <diff; length; ?0> (vars-in-exp, variables)
         then pushed-down-predicates' := <conc> (pushed-down-predicates, [exp]) // can push down
            ; remaining-expressions-plus-varRef' := remaining-expressions-plus-varRef
         else pushed-down-predicates' := pushed-down-predicates // cannot push down
            ; remaining-expressions-plus-varRef' := <conc> (remaining-expressions-plus-varRef, [t])
         end

  push-down-predicates-for-commonPathExpressions(|variablesOuterQuery) = CommonPathExpressions(map(push-down-predicates-for-commonPathExpressions(|variablesOuterQuery)))

  push-down-predicates-for-commonPathExpressions(|variablesOuterQuery):
    CommonPathExpression(name, vertices, edges, constraints, costClause) -> CommonPathExpression(name, vertices, edges, constraints', costClause')
    with new-variables := <collect-var-def-offsets> (vertices, edges)
       ; visible-variables := <conc; make-set> (variablesOuterQuery, new-variables)
       ; constraints':= <alltd(push-down-predicates(|visible-variables))> constraints
       ; costClause':= <alltd(push-down-predicates(|visible-variables))> costClause
